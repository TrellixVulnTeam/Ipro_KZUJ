import { __decorate } from "tslib";
import { ElementRef, NgZone, Component, ChangeDetectionStrategy, ContentChild, ViewContainerRef, } from '@angular/core';
import { proxyOutputs, ProxyCmp } from '../utils/proxies-utils';
import { IonicSelectableItemTemplateDirective } from '../directives/ionic-selectable-item-template.directive';
import { IonicSelectableAddItemTemplateDirective } from '../directives/ionic-selectable-add-item-template.directive';
import { IonicSelectableCloseButtonTemplateDirective } from '../directives/ionic-selectable-close-button-template.directive';
import { IonicSelectableFooterTemplateDirective } from '../directives/ionic-selectable-footer-template.directive';
import { IonicSelectableGroupEndTemplateDirective } from '../directives/ionic-selectable-group-end-template.directive';
import { IonicSelectableGroupTemplateDirective } from '../directives/ionic-selectable-group-template.directive';
import { IonicSelectableHeaderTemplateDirective } from '../directives/ionic-selectable-header-template.directive';
import { IonicSelectableIconTemplateDirective } from '../directives/ionic-selectable-icon-template.directive';
import { IonicSelectableItemEndTemplateDirective } from '../directives/ionic-selectable-item-end-template.directive';
import { IonicSelectableItemIconTemplateDirective } from '../directives/ionic-selectable-item-icon-template.directive';
import { IonicSelectableMessageTemplateDirective } from '../directives/ionic-selectable-message-template.directive';
import { IonicSelectablePlaceholderTemplateDirective } from '../directives/ionic-selectable-placeholder-template.directive';
import { IonicSelectableSearchFailTemplateDirective } from '../directives/ionic-selectable-search-fail-template.directive';
import { IonicSelectableTitleTemplateDirective } from '../directives/ionic-selectable-title-template.directive';
import { IonicSelectableValueTemplateDirective } from '../directives/ionic-selectable-value-template.directive';
let IonicSelectableComponent = class IonicSelectableComponent {
    constructor(elementRef, z, viewContainerRef) {
        this.elementRef = elementRef;
        this.z = z;
        this.viewContainerRef = viewContainerRef;
        this.refMap = new WeakMap();
        this.el = this.elementRef.nativeElement;
        this.el.templateRender = this.render.bind(this);
        this.el.hasTemplateRender = this.hasTemplate.bind(this);
        proxyOutputs(this, this.el, [
            'infiniteScrolled',
            'searching',
            'searchFailed',
            'searchSuccessed',
            'itemAdding',
            'cleared',
            'changed',
            'itemsChanged',
            'selected',
            'opened',
            'closed',
            'focused',
            'blurred',
        ]);
    }
    render(element, template) {
        this.z.run(() => {
            if (template.type === 'addItem') {
                if (!element) {
                    this.refAddItem = null;
                    return;
                }
                if (!this.refAddItem) {
                    this.createEmbeddedView(element, template);
                }
                else {
                    this.updateEmbeddedView(element, template);
                }
            }
            else {
                if (!element.isConnected && element.firstElementChild) {
                    this.refMap.delete(element);
                    return;
                }
                if (!this.refMap.get(element)) {
                    this.createEmbeddedView(element, template);
                }
                else {
                    this.updateEmbeddedView(element, template);
                }
            }
        });
    }
    createEmbeddedView(element, template) {
        const node = this.viewContainerRef.createEmbeddedView(this.getComponent(template.type), {
            $implicit: template.value,
            isItemSelected: template.isItemSelected,
            isItemDisabled: template.isItemDisabled,
            isAdd: template.isAdd,
            type: template.type,
        });
        const childElement = getElement(node);
        element.appendChild(childElement);
        if (template.type === 'addItem') {
            childElement.classList.add('ion-page');
            this.refAddItem = node;
        }
        else {
            this.refMap.set(element, node);
        }
        // run sync change detections
        node.detectChanges();
    }
    updateEmbeddedView(element, template) {
        const node = template.type === 'addItem' ? this.refAddItem : this.refMap.get(element);
        const ctx = node.context;
        if (template.type !== ctx.type) {
            element.removeChild(element.lastChild);
            this.createEmbeddedView(element, template);
            return;
        }
        ctx.$implicit = template.value;
        ctx.isItemSelected = template.isItemSelected;
        ctx.isItemDisabled = template.isItemDisabled;
        ctx.isAdd = template.isAdd;
        // run sync change detections
        node.detectChanges();
    }
    hasTemplate(type) {
        switch (type) {
            case 'addItem':
                return !!this.ionicSelectableAddItemTemplateDirective;
            case 'closeButton':
                return !!this.ionicSelectableCloseButtonTemplateDirective;
            case 'footer':
                return !!this.ionicSelectableFooterTemplateDirective;
            case 'groupEnd':
                return !!this.ionicSelectableGroupEndTemplateDirective;
            case 'group':
                return !!this.ionicSelectableGroupTemplateDirective;
            case 'header':
                return !!this.ionicSelectableHeaderTemplateDirective;
            case 'icon':
                return !!this.ionicSelectableIconTemplateDirective;
            case 'item':
                return !!this.ionicSelectableItemTemplateDirective;
            case 'itemEnd':
                return !!this.ionicSelectableItemEndTemplateDirective;
            case 'itemIcon':
                return !!this.ionicSelectableItemIconTemplateDirective;
            case 'message':
                return !!this.ionicSelectableMessageTemplateDirective;
            case 'placeholder':
                return !!this.ionicSelectablePlaceholderTemplateDirective;
            case 'searchFail':
                return !!this.ionicSelectableSearchFailTemplateDirective;
            case 'title':
                return !!this.ionicSelectableTitleTemplateDirective;
            case 'value':
                return !!this.ionicSelectableValueTemplateDirective;
            default:
                return false;
        }
    }
    getComponent(type) {
        switch (type) {
            case 'addItem':
                return this.ionicSelectableAddItemTemplateDirective.templateRef;
            case 'closeButton':
                return this.ionicSelectableCloseButtonTemplateDirective.templateRef;
            case 'footer':
                return this.ionicSelectableFooterTemplateDirective.templateRef;
            case 'groupEnd':
                return this.ionicSelectableGroupEndTemplateDirective.templateRef;
            case 'group':
                return this.ionicSelectableGroupTemplateDirective.templateRef;
            case 'header':
                return this.ionicSelectableHeaderTemplateDirective.templateRef;
            case 'icon':
                return this.ionicSelectableIconTemplateDirective.templateRef;
            case 'item':
                return this.ionicSelectableItemTemplateDirective.templateRef;
            case 'itemEnd':
                return this.ionicSelectableItemEndTemplateDirective.templateRef;
            case 'itemIcon':
                return this.ionicSelectableItemIconTemplateDirective.templateRef;
            case 'message':
                return this.ionicSelectableMessageTemplateDirective.templateRef;
            case 'placeholder':
                return this.ionicSelectablePlaceholderTemplateDirective.templateRef;
            case 'searchFail':
                return this.ionicSelectableSearchFailTemplateDirective.templateRef;
            case 'title':
                return this.ionicSelectableTitleTemplateDirective.templateRef;
            case 'value':
                return this.ionicSelectableValueTemplateDirective.templateRef;
            default:
                throw new Error(`template for ${type} was not provided`);
        }
    }
};
IonicSelectableComponent.decorators = [
    { type: Component, args: [{
                selector: 'ionic-selectable',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: '<ng-content></ng-content>',
                inputs: [
                    'isOpened',
                    'isDisabled',
                    'placeholder',
                    'closeButtonText',
                    'closeButtonSlot',
                    'itemIconSlot',
                    'confirmButtonText',
                    'clearButtonText',
                    'addButtonText',
                    'name',
                    'selectedText',
                    'isMultiple',
                    'value',
                    'shouldStoreItemValue',
                    'items',
                    'disabledItems',
                    'itemValueField',
                    'itemTextField',
                    'shouldBackdropClose',
                    'modalCssClass',
                    'modalEnterAnimation',
                    'modalLeaveAnimation',
                    'titleText',
                    'groupValueField',
                    'groupTextField',
                    'hasInfiniteScroll',
                    'infiniteScrollThreshold',
                    'hasVirtualScroll',
                    'virtualScrollApproxHeaderHeight',
                    'virtualScrollApproxItemHeight',
                    'hasConfirmButton',
                    'canAddItem',
                    'canClear',
                    'canSearch',
                    'shouldDelegateSearchToEvent',
                    'searchDebounce',
                    'searchPlaceholder',
                    'searchText',
                    'shouldFocusSearchbar',
                    'hasSearchText',
                    'searchCancelButtonIcon',
                    'searchCancelButtonText',
                    'searchClearIcon',
                    'searchInputmode',
                    'searchIcon',
                    'searchShowCancelButton',
                    'isConfirmButtonEnabled',
                    'headerColor',
                    'groupColor',
                    'virtualScrollHeaderFn',
                ]
            },] }
];
IonicSelectableComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: NgZone },
    { type: ViewContainerRef }
];
IonicSelectableComponent.propDecorators = {
    ionicSelectableAddItemTemplateDirective: [{ type: ContentChild, args: [IonicSelectableAddItemTemplateDirective, { static: false },] }],
    ionicSelectableCloseButtonTemplateDirective: [{ type: ContentChild, args: [IonicSelectableCloseButtonTemplateDirective, { static: false },] }],
    ionicSelectableFooterTemplateDirective: [{ type: ContentChild, args: [IonicSelectableFooterTemplateDirective, { static: false },] }],
    ionicSelectableGroupEndTemplateDirective: [{ type: ContentChild, args: [IonicSelectableGroupEndTemplateDirective, { static: false },] }],
    ionicSelectableGroupTemplateDirective: [{ type: ContentChild, args: [IonicSelectableGroupTemplateDirective, { static: false },] }],
    ionicSelectableHeaderTemplateDirective: [{ type: ContentChild, args: [IonicSelectableHeaderTemplateDirective, { static: false },] }],
    ionicSelectableIconTemplateDirective: [{ type: ContentChild, args: [IonicSelectableIconTemplateDirective, { static: false },] }],
    ionicSelectableItemEndTemplateDirective: [{ type: ContentChild, args: [IonicSelectableItemEndTemplateDirective, { static: false },] }],
    ionicSelectableItemIconTemplateDirective: [{ type: ContentChild, args: [IonicSelectableItemIconTemplateDirective, { static: false },] }],
    ionicSelectableItemTemplateDirective: [{ type: ContentChild, args: [IonicSelectableItemTemplateDirective, { static: false },] }],
    ionicSelectableMessageTemplateDirective: [{ type: ContentChild, args: [IonicSelectableMessageTemplateDirective, { static: false },] }],
    ionicSelectablePlaceholderTemplateDirective: [{ type: ContentChild, args: [IonicSelectablePlaceholderTemplateDirective, { static: false },] }],
    ionicSelectableSearchFailTemplateDirective: [{ type: ContentChild, args: [IonicSelectableSearchFailTemplateDirective, { static: false },] }],
    ionicSelectableTitleTemplateDirective: [{ type: ContentChild, args: [IonicSelectableTitleTemplateDirective, { static: false },] }],
    ionicSelectableValueTemplateDirective: [{ type: ContentChild, args: [IonicSelectableValueTemplateDirective, { static: false },] }]
};
IonicSelectableComponent = __decorate([
    ProxyCmp({
        inputs: [
            'isOpened',
            'isDisabled',
            'placeholder',
            'closeButtonText',
            'closeButtonSlot',
            'itemIconSlot',
            'confirmButtonText',
            'clearButtonText',
            'addButtonText',
            'name',
            'selectedText',
            'isMultiple',
            'value',
            'shouldStoreItemValue',
            'items',
            'disabledItems',
            'itemValueField',
            'itemTextField',
            'shouldBackdropClose',
            'modalCssClass',
            'modalEnterAnimation',
            'modalLeaveAnimation',
            'titleText',
            'groupValueField',
            'groupTextField',
            'hasInfiniteScroll',
            'infiniteScrollThreshold',
            'hasVirtualScroll',
            'virtualScrollApproxHeaderHeight',
            'virtualScrollApproxItemHeight',
            'hasConfirmButton',
            'canAddItem',
            'canClear',
            'canSearch',
            'shouldDelegateSearchToEvent',
            'searchDebounce',
            'searchPlaceholder',
            'searchText',
            'shouldFocusSearchbar',
            'hasSearchText',
            'searchCancelButtonIcon',
            'searchCancelButtonText',
            'searchClearIcon',
            'searchInputmode',
            'searchIcon',
            'searchShowCancelButton',
            'isConfirmButtonEnabled',
            'headerColor',
            'groupColor',
            'virtualScrollHeaderFn',
        ],
        methods: [
            'hasValue',
            'open',
            'close',
            'getItemsToConfirm',
            'confirm',
            'clear',
            'enableInfiniteScroll',
            'disableInfiniteScroll',
            'endInfiniteScroll',
            'scrollToTop',
            'scrollToBottom',
            'startSearch',
            'endSearch',
            'showLoading',
            'hideLoading',
            'addItem',
            'deleteItem',
            'toggleItems',
            'showAddItemTemplate',
            'hideAddItemTemplate',
            '',
        ],
    })
], IonicSelectableComponent);
export { IonicSelectableComponent };
const getElement = (view) => {
    const rootNodes = view.rootNodes;
    for (let i = 0; i < rootNodes.length; i++) {
        if (rootNodes[i].nodeType === 1) {
            return rootNodes[i];
        }
    }
    throw new Error('element was not created');
};
const ɵ0 = getElement;
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,