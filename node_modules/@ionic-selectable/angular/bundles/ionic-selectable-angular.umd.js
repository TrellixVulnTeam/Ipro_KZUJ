(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('@angular/common'), require('@ionic-selectable/core/loader'), require('@angular/forms')) :
    typeof define === 'function' && define.amd ? define('@ionic-selectable/angular', ['exports', '@angular/core', 'rxjs', '@angular/common', '@ionic-selectable/core/loader', '@angular/forms'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['ionic-selectable'] = global['ionic-selectable'] || {}, global['ionic-selectable'].angular = {}), global.ng.core, global.rxjs, global.ng.common, global.loader, global.ng.forms));
}(this, (function (exports, core, rxjs, common, loader, forms) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from) {
        for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
            to[j] = from[i];
        return to;
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }
    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    /* eslint-disable */
    var proxyInputs = function (Cmp, inputs) {
        var Prototype = Cmp.prototype;
        inputs.forEach(function (item) {
            Object.defineProperty(Prototype, item, {
                get: function () {
                    return this.el[item];
                },
                set: function (val) {
                    var _this = this;
                    this.z.runOutsideAngular(function () { return (_this.el[item] = val); });
                }
            });
        });
    };
    var proxyMethods = function (Cmp, methods) {
        var Prototype = Cmp.prototype;
        methods.forEach(function (methodName) {
            Prototype[methodName] = function () {
                var _this = this;
                var args = arguments;
                return this.z.runOutsideAngular(function () { return _this.el[methodName].apply(_this.el, args); });
            };
        });
    };
    var proxyOutputs = function (instance, el, events) {
        events.forEach(function (eventName) { return instance[eventName] = rxjs.fromEvent(el, eventName); });
    };
    function ProxyCmp(opts) {
        var decorator = function (cls) {
            if (opts.inputs) {
                proxyInputs(cls, opts.inputs);
            }
            if (opts.methods) {
                proxyMethods(cls, opts.methods);
            }
            return cls;
        };
        return decorator;
    }

    var IonicSelectableItemTemplateDirective = /** @class */ (function () {
        function IonicSelectableItemTemplateDirective(templateRef, viewContainer) {
            this.templateRef = templateRef;
            this.viewContainer = viewContainer;
        }
        return IonicSelectableItemTemplateDirective;
    }());
    IonicSelectableItemTemplateDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: '[ionicSelectableItemTemplate]'
                },] }
    ];
    IonicSelectableItemTemplateDirective.ctorParameters = function () { return [
        { type: core.TemplateRef },
        { type: core.ViewContainerRef }
    ]; };

    var IonicSelectableAddItemTemplateDirective = /** @class */ (function () {
        function IonicSelectableAddItemTemplateDirective(templateRef, viewContainer) {
            this.templateRef = templateRef;
            this.viewContainer = viewContainer;
        }
        return IonicSelectableAddItemTemplateDirective;
    }());
    IonicSelectableAddItemTemplateDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: '[ionicSelectableAddItemTemplate]'
                },] }
    ];
    IonicSelectableAddItemTemplateDirective.ctorParameters = function () { return [
        { type: core.TemplateRef },
        { type: core.ViewContainerRef }
    ]; };

    var IonicSelectableCloseButtonTemplateDirective = /** @class */ (function () {
        function IonicSelectableCloseButtonTemplateDirective(templateRef, viewContainer) {
            this.templateRef = templateRef;
            this.viewContainer = viewContainer;
        }
        return IonicSelectableCloseButtonTemplateDirective;
    }());
    IonicSelectableCloseButtonTemplateDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: '[ionicSelectableCloseButtonTemplate]',
                },] }
    ];
    IonicSelectableCloseButtonTemplateDirective.ctorParameters = function () { return [
        { type: core.TemplateRef },
        { type: core.ViewContainerRef }
    ]; };

    var IonicSelectableFooterTemplateDirective = /** @class */ (function () {
        function IonicSelectableFooterTemplateDirective(templateRef, viewContainer) {
            this.templateRef = templateRef;
            this.viewContainer = viewContainer;
        }
        return IonicSelectableFooterTemplateDirective;
    }());
    IonicSelectableFooterTemplateDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: '[ionicSelectableFooterTemplate]',
                },] }
    ];
    IonicSelectableFooterTemplateDirective.ctorParameters = function () { return [
        { type: core.TemplateRef },
        { type: core.ViewContainerRef }
    ]; };

    var IonicSelectableGroupEndTemplateDirective = /** @class */ (function () {
        function IonicSelectableGroupEndTemplateDirective(templateRef, viewContainer) {
            this.templateRef = templateRef;
            this.viewContainer = viewContainer;
        }
        return IonicSelectableGroupEndTemplateDirective;
    }());
    IonicSelectableGroupEndTemplateDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: '[ionicSelectableGroupEndTemplate]',
                },] }
    ];
    IonicSelectableGroupEndTemplateDirective.ctorParameters = function () { return [
        { type: core.TemplateRef },
        { type: core.ViewContainerRef }
    ]; };

    var IonicSelectableGroupTemplateDirective = /** @class */ (function () {
        function IonicSelectableGroupTemplateDirective(templateRef, viewContainer) {
            this.templateRef = templateRef;
            this.viewContainer = viewContainer;
        }
        return IonicSelectableGroupTemplateDirective;
    }());
    IonicSelectableGroupTemplateDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: '[ionicSelectableGroupTemplate]',
                },] }
    ];
    IonicSelectableGroupTemplateDirective.ctorParameters = function () { return [
        { type: core.TemplateRef },
        { type: core.ViewContainerRef }
    ]; };

    var IonicSelectableHeaderTemplateDirective = /** @class */ (function () {
        function IonicSelectableHeaderTemplateDirective(templateRef, viewContainer) {
            this.templateRef = templateRef;
            this.viewContainer = viewContainer;
        }
        return IonicSelectableHeaderTemplateDirective;
    }());
    IonicSelectableHeaderTemplateDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: '[ionicSelectableHeaderTemplate]',
                },] }
    ];
    IonicSelectableHeaderTemplateDirective.ctorParameters = function () { return [
        { type: core.TemplateRef },
        { type: core.ViewContainerRef }
    ]; };

    var IonicSelectableIconTemplateDirective = /** @class */ (function () {
        function IonicSelectableIconTemplateDirective(templateRef, viewContainer) {
            this.templateRef = templateRef;
            this.viewContainer = viewContainer;
        }
        return IonicSelectableIconTemplateDirective;
    }());
    IonicSelectableIconTemplateDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: '[ionicSelectableIconTemplate]',
                },] }
    ];
    IonicSelectableIconTemplateDirective.ctorParameters = function () { return [
        { type: core.TemplateRef },
        { type: core.ViewContainerRef }
    ]; };

    var IonicSelectableItemEndTemplateDirective = /** @class */ (function () {
        function IonicSelectableItemEndTemplateDirective(templateRef, viewContainer) {
            this.templateRef = templateRef;
            this.viewContainer = viewContainer;
        }
        return IonicSelectableItemEndTemplateDirective;
    }());
    IonicSelectableItemEndTemplateDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: '[ionicSelectableItemEndTemplate]',
                },] }
    ];
    IonicSelectableItemEndTemplateDirective.ctorParameters = function () { return [
        { type: core.TemplateRef },
        { type: core.ViewContainerRef }
    ]; };

    var IonicSelectableItemIconTemplateDirective = /** @class */ (function () {
        function IonicSelectableItemIconTemplateDirective(templateRef, viewContainer) {
            this.templateRef = templateRef;
            this.viewContainer = viewContainer;
        }
        return IonicSelectableItemIconTemplateDirective;
    }());
    IonicSelectableItemIconTemplateDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: '[ionicSelectableItemIconTemplate]',
                },] }
    ];
    IonicSelectableItemIconTemplateDirective.ctorParameters = function () { return [
        { type: core.TemplateRef },
        { type: core.ViewContainerRef }
    ]; };

    var IonicSelectableMessageTemplateDirective = /** @class */ (function () {
        function IonicSelectableMessageTemplateDirective(templateRef, viewContainer) {
            this.templateRef = templateRef;
            this.viewContainer = viewContainer;
        }
        return IonicSelectableMessageTemplateDirective;
    }());
    IonicSelectableMessageTemplateDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: '[ionicSelectableMessageTemplate]',
                },] }
    ];
    IonicSelectableMessageTemplateDirective.ctorParameters = function () { return [
        { type: core.TemplateRef },
        { type: core.ViewContainerRef }
    ]; };

    var IonicSelectablePlaceholderTemplateDirective = /** @class */ (function () {
        function IonicSelectablePlaceholderTemplateDirective(templateRef, viewContainer) {
            this.templateRef = templateRef;
            this.viewContainer = viewContainer;
        }
        return IonicSelectablePlaceholderTemplateDirective;
    }());
    IonicSelectablePlaceholderTemplateDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: '[ionicSelectablePlaceholderTemplate]',
                },] }
    ];
    IonicSelectablePlaceholderTemplateDirective.ctorParameters = function () { return [
        { type: core.TemplateRef },
        { type: core.ViewContainerRef }
    ]; };

    var IonicSelectableSearchFailTemplateDirective = /** @class */ (function () {
        function IonicSelectableSearchFailTemplateDirective(templateRef, viewContainer) {
            this.templateRef = templateRef;
            this.viewContainer = viewContainer;
        }
        return IonicSelectableSearchFailTemplateDirective;
    }());
    IonicSelectableSearchFailTemplateDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: '[ionicSelectableSearchFailTemplate]',
                },] }
    ];
    IonicSelectableSearchFailTemplateDirective.ctorParameters = function () { return [
        { type: core.TemplateRef },
        { type: core.ViewContainerRef }
    ]; };

    var IonicSelectableTitleTemplateDirective = /** @class */ (function () {
        function IonicSelectableTitleTemplateDirective(templateRef, viewContainer) {
            this.templateRef = templateRef;
            this.viewContainer = viewContainer;
        }
        return IonicSelectableTitleTemplateDirective;
    }());
    IonicSelectableTitleTemplateDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: '[ionicSelectableTitleTemplate]',
                },] }
    ];
    IonicSelectableTitleTemplateDirective.ctorParameters = function () { return [
        { type: core.TemplateRef },
        { type: core.ViewContainerRef }
    ]; };

    var IonicSelectableValueTemplateDirective = /** @class */ (function () {
        function IonicSelectableValueTemplateDirective(templateRef, viewContainer) {
            this.templateRef = templateRef;
            this.viewContainer = viewContainer;
        }
        return IonicSelectableValueTemplateDirective;
    }());
    IonicSelectableValueTemplateDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: '[ionicSelectableValueTemplate]',
                },] }
    ];
    IonicSelectableValueTemplateDirective.ctorParameters = function () { return [
        { type: core.TemplateRef },
        { type: core.ViewContainerRef }
    ]; };

    exports.IonicSelectableComponent = /** @class */ (function () {
        function IonicSelectableComponent(elementRef, z, viewContainerRef) {
            this.elementRef = elementRef;
            this.z = z;
            this.viewContainerRef = viewContainerRef;
            this.refMap = new WeakMap();
            this.el = this.elementRef.nativeElement;
            this.el.templateRender = this.render.bind(this);
            this.el.hasTemplateRender = this.hasTemplate.bind(this);
            proxyOutputs(this, this.el, [
                'infiniteScrolled',
                'searching',
                'searchFailed',
                'searchSuccessed',
                'itemAdding',
                'cleared',
                'changed',
                'itemsChanged',
                'selected',
                'opened',
                'closed',
                'focused',
                'blurred',
            ]);
        }
        IonicSelectableComponent.prototype.render = function (element, template) {
            var _this = this;
            this.z.run(function () {
                if (template.type === 'addItem') {
                    if (!element) {
                        _this.refAddItem = null;
                        return;
                    }
                    if (!_this.refAddItem) {
                        _this.createEmbeddedView(element, template);
                    }
                    else {
                        _this.updateEmbeddedView(element, template);
                    }
                }
                else {
                    if (!element.isConnected && element.firstElementChild) {
                        _this.refMap.delete(element);
                        return;
                    }
                    if (!_this.refMap.get(element)) {
                        _this.createEmbeddedView(element, template);
                    }
                    else {
                        _this.updateEmbeddedView(element, template);
                    }
                }
            });
        };
        IonicSelectableComponent.prototype.createEmbeddedView = function (element, template) {
            var node = this.viewContainerRef.createEmbeddedView(this.getComponent(template.type), {
                $implicit: template.value,
                isItemSelected: template.isItemSelected,
                isItemDisabled: template.isItemDisabled,
                isAdd: template.isAdd,
                type: template.type,
            });
            var childElement = getElement(node);
            element.appendChild(childElement);
            if (template.type === 'addItem') {
                childElement.classList.add('ion-page');
                this.refAddItem = node;
            }
            else {
                this.refMap.set(element, node);
            }
            // run sync change detections
            node.detectChanges();
        };
        IonicSelectableComponent.prototype.updateEmbeddedView = function (element, template) {
            var node = template.type === 'addItem' ? this.refAddItem : this.refMap.get(element);
            var ctx = node.context;
            if (template.type !== ctx.type) {
                element.removeChild(element.lastChild);
                this.createEmbeddedView(element, template);
                return;
            }
            ctx.$implicit = template.value;
            ctx.isItemSelected = template.isItemSelected;
            ctx.isItemDisabled = template.isItemDisabled;
            ctx.isAdd = template.isAdd;
            // run sync change detections
            node.detectChanges();
        };
        IonicSelectableComponent.prototype.hasTemplate = function (type) {
            switch (type) {
                case 'addItem':
                    return !!this.ionicSelectableAddItemTemplateDirective;
                case 'closeButton':
                    return !!this.ionicSelectableCloseButtonTemplateDirective;
                case 'footer':
                    return !!this.ionicSelectableFooterTemplateDirective;
                case 'groupEnd':
                    return !!this.ionicSelectableGroupEndTemplateDirective;
                case 'group':
                    return !!this.ionicSelectableGroupTemplateDirective;
                case 'header':
                    return !!this.ionicSelectableHeaderTemplateDirective;
                case 'icon':
                    return !!this.ionicSelectableIconTemplateDirective;
                case 'item':
                    return !!this.ionicSelectableItemTemplateDirective;
                case 'itemEnd':
                    return !!this.ionicSelectableItemEndTemplateDirective;
                case 'itemIcon':
                    return !!this.ionicSelectableItemIconTemplateDirective;
                case 'message':
                    return !!this.ionicSelectableMessageTemplateDirective;
                case 'placeholder':
                    return !!this.ionicSelectablePlaceholderTemplateDirective;
                case 'searchFail':
                    return !!this.ionicSelectableSearchFailTemplateDirective;
                case 'title':
                    return !!this.ionicSelectableTitleTemplateDirective;
                case 'value':
                    return !!this.ionicSelectableValueTemplateDirective;
                default:
                    return false;
            }
        };
        IonicSelectableComponent.prototype.getComponent = function (type) {
            switch (type) {
                case 'addItem':
                    return this.ionicSelectableAddItemTemplateDirective.templateRef;
                case 'closeButton':
                    return this.ionicSelectableCloseButtonTemplateDirective.templateRef;
                case 'footer':
                    return this.ionicSelectableFooterTemplateDirective.templateRef;
                case 'groupEnd':
                    return this.ionicSelectableGroupEndTemplateDirective.templateRef;
                case 'group':
                    return this.ionicSelectableGroupTemplateDirective.templateRef;
                case 'header':
                    return this.ionicSelectableHeaderTemplateDirective.templateRef;
                case 'icon':
                    return this.ionicSelectableIconTemplateDirective.templateRef;
                case 'item':
                    return this.ionicSelectableItemTemplateDirective.templateRef;
                case 'itemEnd':
                    return this.ionicSelectableItemEndTemplateDirective.templateRef;
                case 'itemIcon':
                    return this.ionicSelectableItemIconTemplateDirective.templateRef;
                case 'message':
                    return this.ionicSelectableMessageTemplateDirective.templateRef;
                case 'placeholder':
                    return this.ionicSelectablePlaceholderTemplateDirective.templateRef;
                case 'searchFail':
                    return this.ionicSelectableSearchFailTemplateDirective.templateRef;
                case 'title':
                    return this.ionicSelectableTitleTemplateDirective.templateRef;
                case 'value':
                    return this.ionicSelectableValueTemplateDirective.templateRef;
                default:
                    throw new Error("template for " + type + " was not provided");
            }
        };
        return IonicSelectableComponent;
    }());
    exports.IonicSelectableComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'ionic-selectable',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: '<ng-content></ng-content>',
                    inputs: [
                        'isOpened',
                        'isDisabled',
                        'placeholder',
                        'closeButtonText',
                        'closeButtonSlot',
                        'itemIconSlot',
                        'confirmButtonText',
                        'clearButtonText',
                        'addButtonText',
                        'name',
                        'selectedText',
                        'isMultiple',
                        'value',
                        'shouldStoreItemValue',
                        'items',
                        'disabledItems',
                        'itemValueField',
                        'itemTextField',
                        'shouldBackdropClose',
                        'modalCssClass',
                        'modalEnterAnimation',
                        'modalLeaveAnimation',
                        'titleText',
                        'groupValueField',
                        'groupTextField',
                        'hasInfiniteScroll',
                        'infiniteScrollThreshold',
                        'hasVirtualScroll',
                        'virtualScrollApproxHeaderHeight',
                        'virtualScrollApproxItemHeight',
                        'hasConfirmButton',
                        'canAddItem',
                        'canClear',
                        'canSearch',
                        'shouldDelegateSearchToEvent',
                        'searchDebounce',
                        'searchPlaceholder',
                        'searchText',
                        'shouldFocusSearchbar',
                        'hasSearchText',
                        'searchCancelButtonIcon',
                        'searchCancelButtonText',
                        'searchClearIcon',
                        'searchInputmode',
                        'searchIcon',
                        'searchShowCancelButton',
                        'isConfirmButtonEnabled',
                        'headerColor',
                        'groupColor',
                        'virtualScrollHeaderFn',
                    ]
                },] }
    ];
    exports.IonicSelectableComponent.ctorParameters = function () { return [
        { type: core.ElementRef },
        { type: core.NgZone },
        { type: core.ViewContainerRef }
    ]; };
    exports.IonicSelectableComponent.propDecorators = {
        ionicSelectableAddItemTemplateDirective: [{ type: core.ContentChild, args: [IonicSelectableAddItemTemplateDirective, { static: false },] }],
        ionicSelectableCloseButtonTemplateDirective: [{ type: core.ContentChild, args: [IonicSelectableCloseButtonTemplateDirective, { static: false },] }],
        ionicSelectableFooterTemplateDirective: [{ type: core.ContentChild, args: [IonicSelectableFooterTemplateDirective, { static: false },] }],
        ionicSelectableGroupEndTemplateDirective: [{ type: core.ContentChild, args: [IonicSelectableGroupEndTemplateDirective, { static: false },] }],
        ionicSelectableGroupTemplateDirective: [{ type: core.ContentChild, args: [IonicSelectableGroupTemplateDirective, { static: false },] }],
        ionicSelectableHeaderTemplateDirective: [{ type: core.ContentChild, args: [IonicSelectableHeaderTemplateDirective, { static: false },] }],
        ionicSelectableIconTemplateDirective: [{ type: core.ContentChild, args: [IonicSelectableIconTemplateDirective, { static: false },] }],
        ionicSelectableItemEndTemplateDirective: [{ type: core.ContentChild, args: [IonicSelectableItemEndTemplateDirective, { static: false },] }],
        ionicSelectableItemIconTemplateDirective: [{ type: core.ContentChild, args: [IonicSelectableItemIconTemplateDirective, { static: false },] }],
        ionicSelectableItemTemplateDirective: [{ type: core.ContentChild, args: [IonicSelectableItemTemplateDirective, { static: false },] }],
        ionicSelectableMessageTemplateDirective: [{ type: core.ContentChild, args: [IonicSelectableMessageTemplateDirective, { static: false },] }],
        ionicSelectablePlaceholderTemplateDirective: [{ type: core.ContentChild, args: [IonicSelectablePlaceholderTemplateDirective, { static: false },] }],
        ionicSelectableSearchFailTemplateDirective: [{ type: core.ContentChild, args: [IonicSelectableSearchFailTemplateDirective, { static: false },] }],
        ionicSelectableTitleTemplateDirective: [{ type: core.ContentChild, args: [IonicSelectableTitleTemplateDirective, { static: false },] }],
        ionicSelectableValueTemplateDirective: [{ type: core.ContentChild, args: [IonicSelectableValueTemplateDirective, { static: false },] }]
    };
    exports.IonicSelectableComponent = __decorate([
        ProxyCmp({
            inputs: [
                'isOpened',
                'isDisabled',
                'placeholder',
                'closeButtonText',
                'closeButtonSlot',
                'itemIconSlot',
                'confirmButtonText',
                'clearButtonText',
                'addButtonText',
                'name',
                'selectedText',
                'isMultiple',
                'value',
                'shouldStoreItemValue',
                'items',
                'disabledItems',
                'itemValueField',
                'itemTextField',
                'shouldBackdropClose',
                'modalCssClass',
                'modalEnterAnimation',
                'modalLeaveAnimation',
                'titleText',
                'groupValueField',
                'groupTextField',
                'hasInfiniteScroll',
                'infiniteScrollThreshold',
                'hasVirtualScroll',
                'virtualScrollApproxHeaderHeight',
                'virtualScrollApproxItemHeight',
                'hasConfirmButton',
                'canAddItem',
                'canClear',
                'canSearch',
                'shouldDelegateSearchToEvent',
                'searchDebounce',
                'searchPlaceholder',
                'searchText',
                'shouldFocusSearchbar',
                'hasSearchText',
                'searchCancelButtonIcon',
                'searchCancelButtonText',
                'searchClearIcon',
                'searchInputmode',
                'searchIcon',
                'searchShowCancelButton',
                'isConfirmButtonEnabled',
                'headerColor',
                'groupColor',
                'virtualScrollHeaderFn',
            ],
            methods: [
                'hasValue',
                'open',
                'close',
                'getItemsToConfirm',
                'confirm',
                'clear',
                'enableInfiniteScroll',
                'disableInfiniteScroll',
                'endInfiniteScroll',
                'scrollToTop',
                'scrollToBottom',
                'startSearch',
                'endSearch',
                'showLoading',
                'hideLoading',
                'addItem',
                'deleteItem',
                'toggleItems',
                'showAddItemTemplate',
                'hideAddItemTemplate',
                '',
            ],
        })
    ], exports.IonicSelectableComponent);
    var getElement = function (view) {
        var rootNodes = view.rootNodes;
        for (var i = 0; i < rootNodes.length; i++) {
            if (rootNodes[i].nodeType === 1) {
                return rootNodes[i];
            }
        }
        throw new Error('element was not created');
    };
    var ɵ0$1 = getElement;

    var raf = function (h) {
        if (typeof __zone_symbol__requestAnimationFrame === 'function') {
            return __zone_symbol__requestAnimationFrame(h);
        }
        if (typeof requestAnimationFrame === 'function') {
            return requestAnimationFrame(h);
        }
        return setTimeout(h);
    };

    var didInitialize = false;
    var appInitialize = function (doc, zone) {
        return function () {
            var win = doc.defaultView;
            if (win && typeof window !== 'undefined') {
                if (didInitialize) {
                    console.warn('IonicSelectable Angular was already initialized. Make sure IonicSelectableModule.forRoot() is just called once.');
                }
                didInitialize = true;
                var aelFn_1 = '__zone_symbol__addEventListener' in doc.body
                    ? '__zone_symbol__addEventListener'
                    : 'addEventListener';
                return loader.applyPolyfills().then(function () {
                    return loader.defineCustomElements(win, {
                        syncQueue: true,
                        raf: raf,
                        jmp: function (h) { return zone.runOutsideAngular(h); },
                        ael: function (elm, eventName, cb, opts) {
                            elm[aelFn_1](eventName, cb, opts);
                        },
                        rel: function (elm, eventName, cb, opts) {
                            elm.removeEventListener(eventName, cb, opts);
                        }
                    });
                });
            }
        };
    };

    var ValueAccessor = /** @class */ (function () {
        function ValueAccessor(injector, el) {
            this.injector = injector;
            this.el = el;
            this.onChange = function () { };
            this.onTouched = function () { };
        }
        ValueAccessor.prototype.writeValue = function (value) {
            /**
             * TODO for Ionic 6:
             * Change `value == null ? '' : value;`
             * to `value`. This was a fix for IE9, but IE9
             * is no longer supported; however, this change
             * is potentially a breaking change
             */
            this.el.nativeElement.value = this.lastValue = value == null ? '' : value;
            setIonicClasses(this.el);
        };
        ValueAccessor.prototype.handleChangeEvent = function (el, value) {
            if (el === this.el.nativeElement) {
                if (value !== this.lastValue) {
                    this.lastValue = value;
                    this.onChange(value);
                }
                setIonicClasses(this.el);
            }
        };
        ValueAccessor.prototype._handleBlurEvent = function (el) {
            if (el === this.el.nativeElement) {
                this.onTouched();
                setIonicClasses(this.el);
            }
        };
        ValueAccessor.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        ValueAccessor.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        ValueAccessor.prototype.setDisabledState = function (isDisabled) {
            this.el.nativeElement.disabled = isDisabled;
        };
        ValueAccessor.prototype.ngOnDestroy = function () {
            if (this.statusChanges) {
                this.statusChanges.unsubscribe();
            }
        };
        ValueAccessor.prototype.ngAfterViewInit = function () {
            var _this = this;
            var ngControl;
            try {
                ngControl = this.injector.get(forms.NgControl);
            }
            catch ( /* No FormControl or ngModel binding */_a) { /* No FormControl or ngModel binding */ }
            if (!ngControl) {
                return;
            }
            // Listen for changes in validity, disabled, or pending states
            if (ngControl.statusChanges) {
                this.statusChanges = ngControl.statusChanges.subscribe(function () { return setIonicClasses(_this.el); });
            }
            /**
             * TODO Remove this in favor of https://github.com/angular/angular/issues/10887
             * whenever it is implemented. Currently, Ionic's form status classes
             * do not react to changes when developers manually call
             * Angular form control methods such as markAsTouched.
             * This results in Ionic's form status classes being out
             * of sync with the ng form status classes.
             * This patches the methods to manually sync
             * the classes until this feature is implemented in Angular.
             */
            var formControl = ngControl.control;
            if (formControl) {
                var methodsToPatch = ['markAsTouched', 'markAllAsTouched', 'markAsUntouched', 'markAsDirty', 'markAsPristine'];
                methodsToPatch.forEach(function (method) {
                    if (formControl[method]) {
                        var oldFn_1 = formControl[method].bind(formControl);
                        formControl[method] = function () {
                            var params = [];
                            for (var _i = 0; _i < arguments.length; _i++) {
                                params[_i] = arguments[_i];
                            }
                            oldFn_1.apply(void 0, __spread(params));
                            setIonicClasses(_this.el);
                        };
                    }
                });
            }
        };
        return ValueAccessor;
    }());
    ValueAccessor.propDecorators = {
        _handleBlurEvent: [{ type: core.HostListener, args: ['blurred', ['$event.target'],] }]
    };
    var setIonicClasses = function (element) {
        raf(function () {
            var input = element.nativeElement;
            var classes = getClasses(input);
            setClasses(input, classes);
            var item = input.closest('ion-item');
            if (item) {
                setClasses(item, classes);
            }
        });
    };
    var getClasses = function (element) {
        var classList = element.classList;
        var classes = [];
        for (var i = 0; i < classList.length; i++) {
            var item = classList.item(i);
            if (item !== null && startsWith(item, 'ng-')) {
                classes.push("ion-" + item.substr(3));
            }
        }
        return classes;
    };
    var ɵ0 = getClasses;
    var setClasses = function (element, classes) {
        var classList = element.classList;
        [
            'ion-valid',
            'ion-invalid',
            'ion-touched',
            'ion-untouched',
            'ion-dirty',
            'ion-pristine'
        ].forEach(function (c) { return classList.remove(c); });
        classes.forEach(function (c) { return classList.add(c); });
    };
    var ɵ1 = setClasses;
    var startsWith = function (input, search) {
        return input.substr(0, search.length) === search;
    };
    var ɵ2 = startsWith;

    var IonicSelectableValueAccessor = /** @class */ (function (_super) {
        __extends(IonicSelectableValueAccessor, _super);
        function IonicSelectableValueAccessor(injector, el) {
            return _super.call(this, injector, el) || this;
        }
        IonicSelectableValueAccessor.prototype._handleChangeEvent = function (el) {
            this.handleChangeEvent(el, el.value);
        };
        return IonicSelectableValueAccessor;
    }(ValueAccessor));
    IonicSelectableValueAccessor.decorators = [
        { type: core.Directive, args: [{
                    /* tslint:disable-next-line:directive-selector */
                    selector: 'ionic-selectable',
                    providers: [
                        {
                            provide: forms.NG_VALUE_ACCESSOR,
                            useExisting: IonicSelectableValueAccessor,
                            multi: true
                        }
                    ]
                },] }
    ];
    IonicSelectableValueAccessor.ctorParameters = function () { return [
        { type: core.Injector },
        { type: core.ElementRef }
    ]; };
    IonicSelectableValueAccessor.propDecorators = {
        _handleChangeEvent: [{ type: core.HostListener, args: ['changed', ['$event.target'],] }]
    };

    var DECLARATIONS = [
        //Component
        exports.IonicSelectableComponent,
        //Value accesor
        IonicSelectableValueAccessor,
        //Directives,
        IonicSelectableAddItemTemplateDirective,
        IonicSelectableCloseButtonTemplateDirective,
        IonicSelectableFooterTemplateDirective,
        IonicSelectableGroupEndTemplateDirective,
        IonicSelectableGroupTemplateDirective,
        IonicSelectableHeaderTemplateDirective,
        IonicSelectableIconTemplateDirective,
        IonicSelectableItemEndTemplateDirective,
        IonicSelectableItemIconTemplateDirective,
        IonicSelectableItemTemplateDirective,
        IonicSelectableMessageTemplateDirective,
        IonicSelectablePlaceholderTemplateDirective,
        IonicSelectableSearchFailTemplateDirective,
        IonicSelectableTitleTemplateDirective,
        IonicSelectableValueTemplateDirective
    ];
    var IonicSelectableModule = /** @class */ (function () {
        function IonicSelectableModule() {
        }
        IonicSelectableModule.forRoot = function () {
            return {
                ngModule: IonicSelectableModule,
                providers: [
                    {
                        provide: core.APP_INITIALIZER,
                        useFactory: appInitialize,
                        multi: true,
                        deps: [
                            common.DOCUMENT,
                            core.NgZone
                        ]
                    }
                ]
            };
        };
        return IonicSelectableModule;
    }());
    IonicSelectableModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: DECLARATIONS,
                    exports: DECLARATIONS,
                    imports: [common.CommonModule]
                },] }
    ];

    //COMPONENT

    /**
     * Generated bundle index. Do not edit.
     */

    exports.IonicSelectableModule = IonicSelectableModule;
    exports.ɵa = ProxyCmp;
    exports.ɵb = IonicSelectableAddItemTemplateDirective;
    exports.ɵd = IonicSelectableCloseButtonTemplateDirective;
    exports.ɵe = IonicSelectableFooterTemplateDirective;
    exports.ɵf = IonicSelectableGroupEndTemplateDirective;
    exports.ɵg = IonicSelectableGroupTemplateDirective;
    exports.ɵh = IonicSelectableHeaderTemplateDirective;
    exports.ɵi = IonicSelectableIconTemplateDirective;
    exports.ɵj = IonicSelectableItemEndTemplateDirective;
    exports.ɵk = IonicSelectableItemIconTemplateDirective;
    exports.ɵl = IonicSelectableItemTemplateDirective;
    exports.ɵm = IonicSelectableMessageTemplateDirective;
    exports.ɵn = IonicSelectablePlaceholderTemplateDirective;
    exports.ɵo = IonicSelectableSearchFailTemplateDirective;
    exports.ɵp = IonicSelectableTitleTemplateDirective;
    exports.ɵq = IonicSelectableValueTemplateDirective;
    exports.ɵr = IonicSelectableValueAccessor;
    exports.ɵs = ValueAccessor;
    exports.ɵt = appInitialize;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ionic-selectable-angular.umd.js.map
