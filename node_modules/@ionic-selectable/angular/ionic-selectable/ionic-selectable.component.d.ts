import { EventEmitter, ElementRef, NgZone, ViewContainerRef } from '@angular/core';
import { Components } from '@ionic-selectable/core';
import { IonicSelectableItemTemplateDirective } from '../directives/ionic-selectable-item-template.directive';
import { IonicSelectableAddItemTemplateDirective } from '../directives/ionic-selectable-add-item-template.directive';
import { IonicSelectableCloseButtonTemplateDirective } from '../directives/ionic-selectable-close-button-template.directive';
import { IonicSelectableFooterTemplateDirective } from '../directives/ionic-selectable-footer-template.directive';
import { IonicSelectableGroupEndTemplateDirective } from '../directives/ionic-selectable-group-end-template.directive';
import { IonicSelectableGroupTemplateDirective } from '../directives/ionic-selectable-group-template.directive';
import { IonicSelectableHeaderTemplateDirective } from '../directives/ionic-selectable-header-template.directive';
import { IonicSelectableIconTemplateDirective } from '../directives/ionic-selectable-icon-template.directive';
import { IonicSelectableItemEndTemplateDirective } from '../directives/ionic-selectable-item-end-template.directive';
import { IonicSelectableItemIconTemplateDirective } from '../directives/ionic-selectable-item-icon-template.directive';
import { IonicSelectableMessageTemplateDirective } from '../directives/ionic-selectable-message-template.directive';
import { IonicSelectablePlaceholderTemplateDirective } from '../directives/ionic-selectable-placeholder-template.directive';
import { IonicSelectableSearchFailTemplateDirective } from '../directives/ionic-selectable-search-fail-template.directive';
import { IonicSelectableTitleTemplateDirective } from '../directives/ionic-selectable-title-template.directive';
import { IonicSelectableValueTemplateDirective } from '../directives/ionic-selectable-value-template.directive';
import * as ɵngcc0 from '@angular/core';
export declare interface IonicSelectableComponent extends Components.IonicSelectable {
}
export declare class IonicSelectableComponent {
    private elementRef;
    protected z: NgZone;
    private viewContainerRef;
    infiniteScrolled: EventEmitter<CustomEvent>;
    searching: EventEmitter<CustomEvent>;
    searchFailed: EventEmitter<CustomEvent>;
    searchSuccessed: EventEmitter<CustomEvent>;
    itemAdding: EventEmitter<CustomEvent>;
    cleared: EventEmitter<CustomEvent>;
    changed: EventEmitter<CustomEvent>;
    itemsChanged: EventEmitter<CustomEvent>;
    selected: EventEmitter<CustomEvent>;
    opened: EventEmitter<CustomEvent>;
    closed: EventEmitter<CustomEvent>;
    focused: EventEmitter<CustomEvent>;
    blurred: EventEmitter<CustomEvent>;
    protected el: HTMLIonicSelectableElement;
    private refMap;
    private refAddItem;
    ionicSelectableAddItemTemplateDirective: IonicSelectableAddItemTemplateDirective;
    ionicSelectableCloseButtonTemplateDirective: IonicSelectableCloseButtonTemplateDirective;
    ionicSelectableFooterTemplateDirective: IonicSelectableFooterTemplateDirective;
    ionicSelectableGroupEndTemplateDirective: IonicSelectableGroupEndTemplateDirective;
    ionicSelectableGroupTemplateDirective: IonicSelectableGroupTemplateDirective;
    ionicSelectableHeaderTemplateDirective: IonicSelectableHeaderTemplateDirective;
    ionicSelectableIconTemplateDirective: IonicSelectableIconTemplateDirective;
    ionicSelectableItemEndTemplateDirective: IonicSelectableItemEndTemplateDirective;
    ionicSelectableItemIconTemplateDirective: IonicSelectableItemIconTemplateDirective;
    ionicSelectableItemTemplateDirective: IonicSelectableItemTemplateDirective;
    ionicSelectableMessageTemplateDirective: IonicSelectableMessageTemplateDirective;
    ionicSelectablePlaceholderTemplateDirective: IonicSelectablePlaceholderTemplateDirective;
    ionicSelectableSearchFailTemplateDirective: IonicSelectableSearchFailTemplateDirective;
    ionicSelectableTitleTemplateDirective: IonicSelectableTitleTemplateDirective;
    ionicSelectableValueTemplateDirective: IonicSelectableValueTemplateDirective;
    constructor(elementRef: ElementRef, z: NgZone, viewContainerRef: ViewContainerRef);
    private render;
    private createEmbeddedView;
    private updateEmbeddedView;
    private hasTemplate;
    private getComponent;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<IonicSelectableComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<IonicSelectableComponent, "ionic-selectable", never, { "isOpened": "isOpened"; "isDisabled": "isDisabled"; "placeholder": "placeholder"; "closeButtonText": "closeButtonText"; "closeButtonSlot": "closeButtonSlot"; "itemIconSlot": "itemIconSlot"; "confirmButtonText": "confirmButtonText"; "clearButtonText": "clearButtonText"; "addButtonText": "addButtonText"; "name": "name"; "selectedText": "selectedText"; "isMultiple": "isMultiple"; "value": "value"; "shouldStoreItemValue": "shouldStoreItemValue"; "items": "items"; "disabledItems": "disabledItems"; "itemValueField": "itemValueField"; "itemTextField": "itemTextField"; "shouldBackdropClose": "shouldBackdropClose"; "modalCssClass": "modalCssClass"; "modalEnterAnimation": "modalEnterAnimation"; "modalLeaveAnimation": "modalLeaveAnimation"; "titleText": "titleText"; "groupValueField": "groupValueField"; "groupTextField": "groupTextField"; "hasInfiniteScroll": "hasInfiniteScroll"; "infiniteScrollThreshold": "infiniteScrollThreshold"; "hasVirtualScroll": "hasVirtualScroll"; "virtualScrollApproxHeaderHeight": "virtualScrollApproxHeaderHeight"; "virtualScrollApproxItemHeight": "virtualScrollApproxItemHeight"; "hasConfirmButton": "hasConfirmButton"; "canAddItem": "canAddItem"; "canClear": "canClear"; "canSearch": "canSearch"; "shouldDelegateSearchToEvent": "shouldDelegateSearchToEvent"; "searchDebounce": "searchDebounce"; "searchPlaceholder": "searchPlaceholder"; "searchText": "searchText"; "shouldFocusSearchbar": "shouldFocusSearchbar"; "hasSearchText": "hasSearchText"; "searchCancelButtonIcon": "searchCancelButtonIcon"; "searchCancelButtonText": "searchCancelButtonText"; "searchClearIcon": "searchClearIcon"; "searchInputmode": "searchInputmode"; "searchIcon": "searchIcon"; "searchShowCancelButton": "searchShowCancelButton"; "isConfirmButtonEnabled": "isConfirmButtonEnabled"; "headerColor": "headerColor"; "groupColor": "groupColor"; "virtualScrollHeaderFn": "virtualScrollHeaderFn"; }, {}, ["ionicSelectableAddItemTemplateDirective", "ionicSelectableCloseButtonTemplateDirective", "ionicSelectableFooterTemplateDirective", "ionicSelectableGroupEndTemplateDirective", "ionicSelectableGroupTemplateDirective", "ionicSelectableHeaderTemplateDirective", "ionicSelectableIconTemplateDirective", "ionicSelectableItemEndTemplateDirective", "ionicSelectableItemIconTemplateDirective", "ionicSelectableItemTemplateDirective", "ionicSelectableMessageTemplateDirective", "ionicSelectablePlaceholderTemplateDirective", "ionicSelectableSearchFailTemplateDirective", "ionicSelectableTitleTemplateDirective", "ionicSelectableValueTemplateDirective"], ["*"]>;
}

//# sourceMappingURL=ionic-selectable.component.d.ts.map