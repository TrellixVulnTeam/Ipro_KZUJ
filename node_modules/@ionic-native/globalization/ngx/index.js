import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var Globalization = /** @class */ (function (_super) {
    __extends(Globalization, _super);
    function Globalization() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Globalization.prototype.getPreferredLanguage = function () { return cordova(this, "getPreferredLanguage", {}, arguments); };
    Globalization.prototype.getLocaleName = function () { return cordova(this, "getLocaleName", {}, arguments); };
    Globalization.prototype.dateToString = function (date, options) { return cordova(this, "dateToString", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    Globalization.prototype.stringToDate = function (dateString, options) { return cordova(this, "stringToDate", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    Globalization.prototype.getDatePattern = function (options) { return cordova(this, "getDatePattern", { "callbackOrder": "reverse" }, arguments); };
    Globalization.prototype.getDateNames = function (options) { return cordova(this, "getDateNames", { "callbackOrder": "reverse" }, arguments); };
    Globalization.prototype.isDayLightSavingsTime = function (date) { return cordova(this, "isDayLightSavingsTime", {}, arguments); };
    Globalization.prototype.getFirstDayOfWeek = function () { return cordova(this, "getFirstDayOfWeek", {}, arguments); };
    Globalization.prototype.numberToString = function (numberToConvert, options) { return cordova(this, "numberToString", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    Globalization.prototype.stringToNumber = function (stringToConvert, options) { return cordova(this, "stringToNumber", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    Globalization.prototype.getNumberPattern = function (options) { return cordova(this, "getNumberPattern", { "callbackOrder": "reverse" }, arguments); };
    Globalization.prototype.getCurrencyPattern = function (currencyCode) { return cordova(this, "getCurrencyPattern", {}, arguments); };
    Globalization.pluginName = "Globalization";
    Globalization.plugin = "cordova-plugin-globalization";
    Globalization.pluginRef = "navigator.globalization";
    Globalization.repo = "https://github.com/apache/cordova-plugin-globalization";
    Globalization.platforms = ["Amazon Fire OS", "Android", "Browser", "iOS", "Windows"];
    Globalization.decorators = [
        { type: Injectable }
    ];
    return Globalization;
}(IonicNativePlugin));
export { Globalization };
//# sourceMappingURL=data:application/json;base64,